'use strict';

require('dotenv').config();
const express = require('express');
const { Client, middleware } = require('@line/bot-sdk');

// --- 1. Ë®≠ÂÆö„Å®„ÇØ„É©„Ç§„Ç¢„É≥„Éà„ÅÆÂàùÊúüÂåñ ---

// Áí∞Â¢ÉÂ§âÊï∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN,
  channelSecret: process.env.LINE_CHANNEL_SECRET,
};

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
if (!lineConfig.channelAccessToken || !lineConfig.channelSecret) {
    console.error('‚ùå LINE Channel Access Token or Channel Secret is not set in environment variables.');
    console.error('Please check your Railway environment variables.');
    process.exit(1);
}

const PORT = process.env.PORT || 8080;
const app = express();

let lineClient;
let projectAnalyzer;
let notionService;

// ÈáçË§áÈò≤Ê≠¢Áî®„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•
const processedMessages = new Map();
const CACHE_EXPIRY = 5 * 60 * 1000; // 5ÂàÜ

try {
    lineClient = new Client(lineConfig);
    console.log('‚úÖ LINE client initialized successfully');
} catch (error) {
    console.error('‚ùå Failed to initialize LINE client:', error);
    process.exit(1);
}

// „Çµ„Éº„Éì„Çπ„ÅÆÂàùÊúüÂåñÔºà„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞‰ªò„ÅçÔºâ
try {
    projectAnalyzer = require("./services/projectAnalyzer");
    console.log('‚úÖ Project analyzer loaded');
} catch (error) {
    console.error('‚ùå Failed to load project analyzer:', error.message);
    projectAnalyzer = null;
}

try {
    notionService = require('./services/notion');
    console.log('‚úÖ Notion service loaded');
} catch (error) {
    console.error('‚ùå Failed to load notion service:', error.message);
    notionService = null;
}

// --- 2. ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØÈñ¢Êï∞ ---

function isDuplicateMessage(userId, messageText, timestamp) {
  const key = `${userId}_${messageText}`;
  const now = Date.now();
  
  // Âè§„ÅÑ„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
  for (const [cacheKey, cacheData] of processedMessages.entries()) {
    if (now - cacheData.timestamp > CACHE_EXPIRY) {
      processedMessages.delete(cacheKey);
    }
  }
  
  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  if (processedMessages.has(key)) {
    const lastProcessed = processedMessages.get(key);
    const timeDiff = now - lastProcessed.timestamp;
    
    if (timeDiff < CACHE_EXPIRY) {
      console.log(`[DUPLICATE] Message already processed ${timeDiff}ms ago: "${messageText}"`);
      return true;
    }
  }
  
  // Êñ∞„Åó„ÅÑ„É°„ÉÉ„Çª„Éº„Ç∏„Å®„Åó„Å¶Ë®òÈå≤
  processedMessages.set(key, { timestamp: now });
  console.log(`[NEW] Processing new message: "${messageText}"`);
  return false;
}

// --- 3. „É°„Ç§„É≥„ÅÆÂá¶ÁêÜ„Éï„É≠„Éº„ÇíÂÆöÁæ© ---

async function handleEvent(event) {
  // „ÉÜ„Ç≠„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏‰ª•Â§ñ„ÄÅ„Åæ„Åü„ÅØÁ©∫„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏„ÅØÁÑ°Ë¶ñ
  if (event.type !== 'message' || event.message.type !== 'text' || !event.message.text.trim()) {
    console.log('[INFO] Non-text message or empty message, ignoring');
    return Promise.resolve(null);
  }

  const userText = event.message.text;
  const userId = event.source.userId;
  const timestamp = Date.now();
  
  console.log(`[EVENT] Received text message from ${userId}: "${userText}"`);

  // ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
  if (isDuplicateMessage(userId, userText, timestamp)) {
    console.log('[SKIP] Duplicate message detected, skipping processing');
    // ÈáçË§á„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑÔºàLINE„Å´„ÅØÂøúÁ≠î„Åó„Å™„ÅÑÔºâ
    return Promise.resolve(null);
  }

  // „Çµ„Éº„Éì„Çπ„ÅåÂà©Áî®„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅÆÂá¶ÁêÜ
  if (!projectAnalyzer || !notionService) {
    console.error('[ERROR] Required services not available');
    const errorMessage = {
      type: 'text',
      text: '‚ö†Ô∏è „Ç∑„Çπ„ÉÜ„É†„ÅÆ‰∏ÄÈÉ®„ÅåÂà©Áî®„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Åó„Å∞„Çâ„ÅèÊôÇÈñì„Çí„Åä„ÅÑ„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ'
    };
    try {
      await lineClient.replyMessage(event.replyToken, errorMessage);
    } catch (replyError) {
      console.error('[ERROR] Failed to send service unavailable reply:', replyError);
    }
    return;
  }

  try {
    // Âá¶ÁêÜÈñãÂßã„ÇíLINE„Å´ÈÄöÁü•ÔºàÂç≥Â∫ß„Å´„É¨„Çπ„Éù„É≥„ÇπÔºâ
    const processingMessage = {
      type: 'text',
      text: 'üìù Ëß£Êûê‰∏≠„Åß„Åô„ÄÇÂ∞ë„ÄÖ„ÅäÂæÖ„Å°„Åè„Å†„Åï„ÅÑ...'
    };
    
    // „Åô„Åê„Å´„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„Åô
    try {
      await lineClient.replyMessage(event.replyToken, processingMessage);
    } catch (replyError) {
      console.error('[ERROR] Failed to send processing message:', replyError);
    }

    // „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüÈöõ„ÅÆÂá¶ÁêÜ„ÇíÂÆüË°å
    processMessageInBackground(userText, userId);

  } catch (error) {
    console.error('[ERROR] Failed to handle event:', error);
    // Êó¢„Å´„É¨„Çπ„Éù„É≥„Çπ„ÅåÈÄÅ‰ø°„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„ÄÅ„Åì„Åì„Åß„ÅØpush message„Çí‰ΩøÁî®
    const errorMessage = {
      type: 'text',
      text: `‚ùå „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ\n\nË©≥Á¥∞: ${error.message}`
    };
    try {
      await lineClient.pushMessage(userId, errorMessage);
    } catch (pushError) {
      console.error('[ERROR] Failed to send error push message:', pushError);
    }
  }
}

// „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÂá¶ÁêÜ
async function processMessageInBackground(userText, userId) {
  try {
    console.log('[BACKGROUND] Starting background processing...');
    
    // Gemini„Åß„ÉÜ„Ç≠„Çπ„Éà„ÇíËß£Êûê
    console.log('[GEMINI] Analyzing text...');
    const analysisResult = await projectAnalyzer.analyzeText(userText);
    
    // Notion„Å´„Éö„Éº„Ç∏„Çí‰ΩúÊàê
    console.log('[NOTION] Creating page...');
    const notionPage = await notionService.createPageFromAnalysis(analysisResult);

    // ÊàêÂäü„ÇíLINE„Å´ÈÄöÁü•
    console.log(`[SUCCESS] Process completed. Notion URL: ${notionPage.url}`);
    const successMessage = {
      type: 'text',
      text: `‚úÖ Notion„Å´„Éö„Éº„Ç∏„Çí‰ΩúÊàê„Åó„Åæ„Åó„ÅüÔºÅ\n\nüìÑ „Éö„Éº„Ç∏: ${notionPage.url}`
    };
    await lineClient.pushMessage(userId, successMessage);

  } catch (error) {
    console.error('[BACKGROUND ERROR] Background processing failed:', error);
    const errorMessage = {
      type: 'text',
      text: `‚ùå Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ\nÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ\n\nË©≥Á¥∞: ${error.message}`
    };
    try {
      await lineClient.pushMessage(userId, errorMessage);
    } catch (pushError) {
      console.error('[ERROR] Failed to send background error message:', pushError);
    }
  }
}

// --- 4. Webhook„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅÆË®≠ÂÆö ---

// „É´„Éº„Éà„Éë„Çπ„Å∏„ÅÆ„Ç¢„ÇØ„Çª„Çπ„ÅØ„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁî®
app.get("/", (req, res) => {
  console.log('[HEALTH] Health check requested');
  res.status(200).json({
    status: "OK",
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development',
    services: {
      projectAnalyzer: !!projectAnalyzer,
      notionService: !!notionService
    },
    cacheSize: processedMessages.size
  });
});

// LINE„Åã„Çâ„ÅÆWebhook„É™„ÇØ„Ç®„Çπ„Éà„ÇíÂá¶ÁêÜ„Åô„Çã„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà
app.post('/webhook', (req, res) => {
  console.log('[WEBHOOK] Received request');
  
  try {
    // LINEÁΩ≤Âêç„ÅÆÊ§úË®º
    const signature = req.headers['x-line-signature'];
    if (!signature) {
      console.error('[WEBHOOK] Missing LINE signature');
      return res.status(400).send('Missing LINE signature');
    }

    // „É™„ÇØ„Ç®„Çπ„Éà„Éú„Éá„Ç£„ÅÆÂèñÂæó
    let body = '';
    req.on('data', chunk => {
      body += chunk.toString();
    });

    req.on('end', async () => {
      try {
        console.log('[WEBHOOK] Processing request body...');
        
        // Á©∫„ÅÆ„Éú„Éá„Ç£ÔºàÊ§úË®º„É™„ÇØ„Ç®„Çπ„ÉàÔºâ„ÅÆÂ†¥Âêà
        if (!body || body.trim() === '') {
          console.log('[WEBHOOK] Empty body - verification request');
          return res.status(200).send('OK');
        }

        // JSON„Éë„Éº„Çπ
        let requestBody;
        try {
          requestBody = JSON.parse(body);
        } catch (parseError) {
          console.error('[WEBHOOK] Failed to parse JSON:', parseError);
          return res.status(400).send('Invalid JSON');
        }

        // Ê§úË®º„É™„ÇØ„Ç®„Çπ„Éà„Åã„Å©„ÅÜ„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        if (!requestBody.events || requestBody.events.length === 0) {
          console.log('[WEBHOOK] No events - verification request');
          return res.status(200).send('OK');
        }

        // LINEÁΩ≤ÂêçÊ§úË®ºÔºàÂÆüÈöõ„ÅÆWebhook„Ç§„Éô„É≥„Éà„ÅÆÂ†¥Âêà„ÅÆ„ÅøÔºâ
        const crypto = require('crypto');
        const channelSecret = process.env.LINE_CHANNEL_SECRET;
        const hash = crypto.createHmac('sha256', channelSecret).update(body).digest('base64');
        
        if (signature !== hash) {
          console.error('[WEBHOOK] Invalid signature');
          return res.status(401).send('Invalid signature');
        }

        // ÂÖà„Å´„É¨„Çπ„Éù„É≥„Çπ„ÇíËøî„ÅôÔºàLINE„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÂØæÁ≠ñÔºâ
        res.status(200).send('OK');

        // „Ç§„Éô„É≥„ÉàÂá¶ÁêÜÔºàÈùûÂêåÊúüÔºâ
        console.log('[WEBHOOK] Starting event processing...');
        Promise.all(requestBody.events.map(handleEvent))
          .catch(error => {
            console.error('[WEBHOOK] Error in event processing:', error);
          });
        
      } catch (error) {
        console.error('[WEBHOOK] Error processing request:', error);
        if (!res.headersSent) {
          res.status(500).send('Internal Server Error');
        }
      }
    });

  } catch (error) {
    console.error('[WEBHOOK] Unexpected error:', error);
    if (!res.headersSent) {
      res.status(500).send('Internal Server Error');
    }
  }
});

// --- 5. „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞ ---

// 404 „Éè„É≥„Éâ„É©„Éº
app.use((req, res) => {
  console.log(`[404] ${req.method} ${req.url} not found`);
  res.status(404).json({ error: 'Not Found' });
});

// „Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
app.use((error, req, res, next) => {
  console.error('[ERROR] Unhandled error:', error);
  if (!res.headersSent) {
    res.status(500).json({ error: 'Internal Server Error' });
  }
});

// --- 6. „Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï ---

app.listen(PORT, () => {
  console.log('==================================================');
  console.log(`         üöÄ Server running on port ${PORT}`);
  console.log(`         Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log('  Ready to receive LINE webhook requests!');
  console.log('  üõ°Ô∏è  Duplicate message protection enabled');
  console.log('==================================================');
});